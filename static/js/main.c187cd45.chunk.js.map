{"version":3,"sources":["getWeb3.js","NavBar.js","Countdown.js","Election.js","Create.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","NavBar","props","setAccount","className","href","account","Countdown","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","Time","Date","getTime","parseInt","time","max","b","setInterval","now","distance","Math","floor","Election","elections","map","item","key","id","candidates","guy","cname","cvotes","onClick","vote","Create","timeLeft","setPoll","setCandidates","temporary","setTemp","setTime","numberOfCandidates","setNum","htmlFor","type","value","onChange","event","num","target","temp","temp1","i","v","setCandidate","addPoll","handleSubmit","App","state","storageValue","accounts","contract","userAccount","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","setState","instance","Contract","abi","address","methods","getNum","call","cnt","isRunning","getNumOfCandidates","numCandidates","curr","j","getCandidate","candidateName","getVotes","candidateVotes","nem","utils","hexToAscii","push","getTimeLeft","alert","error","_electionId","_candidateId","send","from","poll","length","asciiToHex","createElection","this","StrictMode","path","element","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c187cd45.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\n\n\nconst NavBar = (props) => {\n\n\n    props.setAccount()\n    return ( \n        <nav >\n\n            <div className = 'logo'>\n                <span>Decentralized Polls</span>\n            </div>\n\n            <div className='Links'>\n                <a className='link' href=\"/votingDapp/#/\">Home</a>\n                <a className='link' href=\"/votingDapp/#/create\">New Poll</a>\n            </div>\n\n            <p>Your account:<em className='acc'> {props.account} </em></p>\n\n\n           \n          \n            \n\n        </nav>\n     );\n}\n \nexport default NavBar;","import React, {useState} from 'react';\n\n\nconst Countdown = (props) => {\n\n\n\n    let [days, setDays] = useState(0);\n    let [hours, setHours] = useState(0);\n    let [minutes, setMinutes] = useState(0);\n    let [seconds, setSeconds] = useState(0);\n\n\n    const Now = new Date().getTime();\n\n    const Time = parseInt(props.time)*1000\n\n    //console.log(props.time,time, Now)\n\n    const max = (a,b) => {\n        if(a>b)return a;\n        else return b;\n    }\n\n    var x= setInterval(function() {\n\n        var now = new Date().getTime();\n        var distance = Time-now\n\n\n        setDays(max(Math.floor(distance / (1000*60 * 60 * 24)),0));\n        setHours(max(Math.floor((distance % (1000*60 * 60 * 24)) / (1000 * 60 * 60)), 0));\n        setMinutes(max(Math.floor((distance % (1000*60 * 60)) / (1000 * 60)), 0));\n        setSeconds( max(Math.floor((distance % (1000*60)) / 1000), 0));\n\n\n    }, 1000)\n\n\n\n    return ( \n        <span className='countdown'>\n            <span>{days}D </span>\n            <span>{hours}H </span>\n            <span>{minutes}m </span>\n            <span>{seconds}s </span>\n\n\n        </span>\n     );\n}\n \nexport default Countdown;","import React,{Component} from 'react';\nimport Countdown from './Countdown.js';\n\n\n\n\nconst Election = (props) => {\n\n    //console.log('hello',props.elections)\n    return ( \n        <div >\n            {\n                props.elections.map(\n                    item =>(\n                        <div className='poll' key ={item.id} >\n                            <Countdown\n                            time = {item.time}\n                            />\n\n                            \n                            {\n\n                                <table>\n                                    <th>Candidate</th>\n                                    <th>Votes</th>\n                                    {\n                                        item.candidates.map(\n                                            guy => (\n\n                                                    <tr >\n                                                        <td>{guy.cname}</td>\n                                                        <td>{guy.cvotes}</td>\n                                                        <td><button className='btn' onClick={()=>{props.vote(item.id, guy.id)}}>VOTE!</button></td>\n                                                    </tr>\n\n                                            )\n                                        )\n                                    }\n                                </table>\n                            }\n\n                        </div>\n                    )\n               \n\n                )\n            }\n\n\n        </div>\n     );\n}\n \nexport default Election;\n\n\n\n  ","import React, {useState} from 'react';\n\nconst Create = (props) => {\n\n\n    let [poll, setPoll] = useState({timeLeft: 0, candidates: []})\n    let [candidates, setCandidates] = useState([]);\n    let [temporary, setTemp] = useState([]);\n    let [time, setTime] = useState();\n    let [numberOfCandidates, setNum] = useState(0);\n\n\n    const handleSubmit = () => {\n        //console.log(\"hello\")\n        const temp = {timeLeft: 0, candidates: []}\n        temp.timeLeft = time\n        temp.candidates = [...candidates]\n        //console.log('temp', temp)\n        setPoll(temp)\n        props.addPoll(temp)\n    }\n    const handleTime = (event) => {\n        const num = event.target.value\n        setTime(num)\n    }\n\n\n    const setNumberOfCandidates = (event) => {\n        \n        const num = event.target.value\n        setNum(num)\n        const temp = []\n        const temp1 = []\n\n        for(var i=0;i<num;i++)\n        {\n            temp[i] = \"\";\n            temp1[i] = i\n        }\n        setCandidates(temp)\n        setTemp(temp1)\n    }\n\n    const setCandidate = (event, id) => {\n        const v = event.target.value\n        let temp = [...candidates]\n        temp[id] = v\n        setCandidates(temp)\n\n    }\n\n\n    const show = () => {\n        console.log(poll)\n    }\n    \n    \n\n    return ( \n        <div className=\"create\">\n            <div>\n\n\n\n                    <label htmlFor=\"num\">Number of Candidates:</label>\n                    <input type=\"number\" id=\"num\" value = {numberOfCandidates} onChange={setNumberOfCandidates}></input><br/>\n\n                    <label htmlFor=\"time\">Election Time in seconds:</label>\n                    <input type=\"number\" id=\"time\" onChange={handleTime}></input><br/>\n\n\n                <div className='mainInput'>\n                    {\n                        temporary.map(\n                            item => (\n                            <span key = {item}> <input type = \"text\"  onChange = {(event) => {setCandidate(event,item)}} ></input> <br/></span>\n                            )\n                        )\n                    }\n                </div>\n\n                <button className='btn summit' onClick={() =>{handleSubmit()}}>Add to the Blockchain!</button>\n                \n\n\n            </div>\n\n            \n            \n        </div>\n     );\n}\n \nexport default Create;","\n\nimport React, { Component, useState } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport {\n  BrowserRouter,\n  HashRouter,\n  Routes,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from './NavBar';\nimport Election from './Election';\nimport Create from './Create';\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, elections: [], userAccount: null };\n\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      this.setState({account: accounts[0]});\n      const instance = new web3.eth.Contract(\n       Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n        \n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n      \n\n      const contract =  this.state.contract\n      const cnt = await contract.methods.getNum().call()\n      this.setState({cnt})\n      console.log(cnt)\n      \n        var interval =  setInterval(() => {\n\n          if(accounts[0] !== this.state.userAccount)\n          {\n            this.setState({userAccount: accounts[0]});\n\n\n          }\n        }, 500);\n\n        for(var i = 0; i<cnt;i++) {\n          const running =  await contract.methods.isRunning(i).call()\n    \n          \n          if(!running)\n          {\n            continue;\n          }\n    \n          \n          const numCandidates = await contract.methods.getNumOfCandidates(i).call()\n          \n          \n          \n          const curr = []      //push in state\n          for(var j = 0;j<numCandidates;j++)\n          {\n            const candidateName =  await contract.methods.getCandidate(i,j).call()\n            const candidateVotes = await contract.methods.getVotes(i,j).call()\n    \n    \n    \n            const nem = web3.utils.hexToAscii(candidateName);\n            curr.push({id: j, cname: nem, cvotes: candidateVotes})\n          }\n         \n          //change this to getEndTime later\n          const timeLeft = await contract.methods.getTimeLeft(i).call()   //push in state\n    \n          //add chairperson or title feature later\n          \n          this.setState(\n            {elections: [...this.state.elections, {candidates: curr, time: timeLeft, id: i}]}\n          )\n    \n    \n    \n        }\n\n\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check your Metamask and make sure you're on Rinkeby.`,\n      );\n      console.error(error);\n    }\n  };\n\n  \n \n\n\n  setAccount = async() => {\n    const accounts = await this.state.web3.eth.getAccounts();\n    this.state.userAccount = accounts[0]\n    \n  }\n  \n\n  vote = async (_electionId, _candidateId) => \n  {\n    console.log('bruh', _electionId, _candidateId)\n      try {\n        await this.state.contract.methods.vote(_electionId, _candidateId).send({from:this.state.userAccount, value: 0})\n     }\n      catch (error){\n          alert(\"Error in voting, looks like you've already voted\");\n      }\n\n  }\n\n  addPoll = async (poll) => \n  {\n\n    //function createElection(bytes32[] calldata proposalNames, uint votingTime)\n    let temp = []\n    let timeLeft = poll.timeLeft\n    for(var i= 0;i<poll.candidates.length;i++)\n    {\n      temp.push(this.state.web3.utils.asciiToHex(poll.candidates[i]));\n    }\n    //edit edit\n    await this.state.contract.methods.createElection(temp, timeLeft).send({from:this.state.userAccount, value: 0})\n\n  }\n\n\n\n \n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      \n      <React.StrictMode >\n      <HashRouter>\n        <div className=\"App\">\n\n          <NavBar  \n          setAccount = {this.setAccount}\n          account = {this.state.userAccount}\n          />\n\n          \n\n          <Routes>\n            <Route path=\"/\" element={<Election\n              elections = {this.state.elections}\n              vote = {this.vote}\n            />} />\n            <Route path=\"/create\" element={<Create \n              addPoll = {this.addPoll}\n              \n            />} />\n          </Routes>\n          \n\n          <div className=\"content\">\n           \n          </div>\n        </div>\n\n      </HashRouter>\n      </React.StrictMode>\n\n    );\n  }\n}\n\nexport default App;\n\n\n\n/*\nimport React, { useEffect, useState } from 'react';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from './NavBar';\nimport Election from './Election';\nimport Create from './Create';\n\nfunction App() {\n  const [account, setAccount] = useState(); // state variable to set account.\n  \n  useEffect(() => {\n    async function load() {\n      const web3 = await getWeb3();\n\n      const accounts = await web3.eth.requestAccounts();\n      \n      setAccount(accounts[0]);\n    }\n    \n    load();\n   }, []);\n  \n   return (\n     <div>\n       Your account is: {account}\n     </div>\n   );\n}\n\nexport default App;\n\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}